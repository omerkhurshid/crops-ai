name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./apps/web
    
    - name: Type check
      run: npm run type-check
      working-directory: ./apps/web
    
    - name: Lint
      run: npm run lint
      working-directory: ./apps/web
    
    - name: Run tests
      run: npm run test:ci
      working-directory: ./apps/web
    
    - name: Security audit
      run: npm run security:scan
      working-directory: ./apps/web
      continue-on-error: true
    
    - name: Performance tests
      run: npm run perf:test
      working-directory: ./apps/web
      continue-on-error: true
    
    - name: Build application
      run: npm run build
      working-directory: ./apps/web
    
    - name: Set deployment flag
      id: checks
      run: echo "should-deploy=true" >> $GITHUB_OUTPUT

  deploy:
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./apps/web
    
    - name: Install Vercel CLI
      run: npm install -g vercel
    
    - name: Deploy to Vercel
      id: deploy
      run: |
        cd apps/web
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "Deploying to staging..."
          DEPLOYMENT_URL=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm)
        else
          echo "Deploying to production..."
          DEPLOYMENT_URL=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm)
        fi
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOYMENT_URL"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Update database schema
      run: |
        cd apps/web
        npx prisma db push
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run post-deployment tests
      run: |
        cd apps/web
        sleep 30  # Wait for deployment to be ready
        
        # Health check
        if curl -f -s "${{ steps.deploy.outputs.url }}/api/health"; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi
        
        # GraphQL check
        if curl -f -s "${{ steps.deploy.outputs.url }}/api/graphql"; then
          echo "‚úÖ GraphQL endpoint accessible"
        else
          echo "‚ö†Ô∏è GraphQL endpoint check failed"
        fi
    
    - name: Create deployment report
      run: |
        cat > deployment-report.md << EOF
        # Deployment Report
        
        **Date**: $(date)
        **Environment**: ${{ github.event.inputs.environment || 'production' }}
        **Deployment URL**: ${{ steps.deploy.outputs.url }}
        **Git Commit**: ${{ github.sha }}
        **Git Branch**: ${{ github.ref_name }}
        **Triggered by**: ${{ github.actor }}
        
        ## Pre-deployment Checks
        - ‚úÖ Type checking passed
        - ‚úÖ Linting passed
        - ‚úÖ Tests passed
        - ‚úÖ Security audit completed
        - ‚úÖ Build successful
        - ‚úÖ Database schema updated
        
        ## Deployment Details
        - **Vercel Project**: ${{ secrets.VERCEL_PROJECT_ID }}
        - **Deployment ID**: ${{ steps.deploy.outputs.url }}
        - **Status**: Successful
        
        ## Post-deployment Verification
        - Health endpoint: ‚úÖ Passed
        - GraphQL endpoint: ‚úÖ Accessible
        
        EOF
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.sha }}
        path: deployment-report.md
        retention-days: 90
    
    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: [${{ steps.deploy.outputs.url }}](${{ steps.deploy.outputs.url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Verification Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Health check: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- GraphQL endpoint: Accessible" >> $GITHUB_STEP_SUMMARY
        echo "- Database: Schema updated" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [pre-deployment-checks, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "‚úÖ Deployment completed successfully"
          echo "URL: ${{ needs.deploy.outputs.url }}"
        else
          echo "‚ùå Deployment failed"
          echo "Please check the logs and fix any issues"
        fi
    
    # Optional: Send notification to Slack/Discord
    # - name: Slack Notification
    #   if: needs.deploy.result == 'success'
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: success
    #     text: "üöÄ Crops.AI deployed successfully to ${{ needs.deploy.outputs.url }}"
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}