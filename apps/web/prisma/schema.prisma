// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis]
}

enum UserRole {
  FARM_OWNER
  FARM_MANAGER
  AGRONOMIST
  ADMIN
}

enum CropStatus {
  PLANNED
  PLANTED
  GROWING
  READY_TO_HARVEST
  HARVESTED
  FAILED
}

enum StressLevel {
  NONE
  LOW
  MODERATE
  HIGH
  SEVERE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum FinancialCategory {
  // Income categories
  CROP_SALES
  LIVESTOCK_SALES
  SUBSIDIES
  LEASE_INCOME
  OTHER_INCOME
  // Expense categories
  SEEDS
  FERTILIZER
  PESTICIDES
  LABOR
  MACHINERY
  FUEL
  IRRIGATION
  STORAGE
  INSURANCE
  OVERHEAD
  OTHER_EXPENSE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String?
  role         UserRole @default(FARM_OWNER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ownedFarms            Farm[]
  managedFarms          FarmManager[]
  weatherAlerts         WeatherAlert[]
  financialTransactions FinancialTransaction[]
  createdTransactions   FinancialTransaction[] @relation("TransactionCreator")

  @@map("users")
}

model Farm {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  location  String?  // Added to match database
  latitude  Float
  longitude Float
  address   String?
  region    String?
  country   String   @default("US")
  totalArea Float // in hectares
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner                 User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  fields                Field[]
  managers              FarmManager[]
  financialTransactions FinancialTransaction[]
  financialBudgets      FinancialBudget[]
  financialForecasts    FinancialForecast[]

  @@map("farms")
}

model FarmManager {
  id     String @id @default(cuid())
  farmId String
  userId String

  // Relations
  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([farmId, userId])
  @@map("farm_managers")
}

model Field {
  id          String                     @id @default(cuid())
  farmId      String
  name        String
  area        Float // in hectares
  boundary    Unsupported("geography")? // PostGIS geography type
  soilType    String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  // Relations
  farm                  Farm                   @relation(fields: [farmId], references: [id], onDelete: Cascade)
  crops                 Crop[]
  satelliteData         SatelliteData[]
  weatherData           WeatherData[]
  recommendations       Recommendation[]
  financialTransactions FinancialTransaction[]
  financialForecasts    FinancialForecast[]

  @@map("fields")
}

model Crop {
  id                  String     @id @default(cuid())
  fieldId             String
  cropType            String
  variety             String?
  plantingDate        DateTime
  expectedHarvestDate DateTime
  actualHarvestDate   DateTime?
  status              CropStatus @default(PLANNED)
  yield               Float? // in kg/hectare
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  field                 Field                  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  financialTransactions FinancialTransaction[]
  financialForecasts    FinancialForecast[]

  @@map("crops")
}

model WeatherData {
  id           String   @id @default(cuid())
  fieldId      String
  timestamp    DateTime
  temperature  Float // in Celsius
  humidity     Float // percentage
  precipitation Float // in mm
  windSpeed    Float // in m/s
  windDirection Int // in degrees
  pressure     Float // in hPa
  cloudCover   Float // percentage
  createdAt    DateTime @default(now())

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("weather_data")
}

model WeatherForecast {
  id                       String   @id @default(cuid())
  latitude                 Float
  longitude                Float
  date                     DateTime
  minTemp                  Float
  maxTemp                  Float
  precipitationProbability Float
  precipitationAmount      Float?
  conditions               String
  createdAt                DateTime @default(now())

  @@map("weather_forecasts")
}

model WeatherAlert {
  id          String   @id @default(cuid())
  userId      String
  alertType   String // frost, storm, drought, etc.
  severity    String // low, medium, high, severe
  message     String
  isActive    Boolean  @default(true)
  triggeredAt DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weather_alerts")
}

model SatelliteData {
  id          String      @id @default(cuid())
  fieldId     String
  captureDate DateTime
  ndvi        Float
  ndviChange  Float?
  stressLevel StressLevel @default(NONE)
  imageUrl    String?
  createdAt   DateTime    @default(now())

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("satellite_data")
}

model Recommendation {
  id          String   @id @default(cuid())
  fieldId     String
  type        String // irrigation, fertilization, planting, harvest, etc.
  title       String
  description String
  priority    String   @default("medium") // low, medium, high, urgent
  isCompleted Boolean  @default(false)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model FinancialTransaction {
  id              String            @id @default(cuid())
  userId          String
  farmId          String
  fieldId         String?
  cropId          String?
  
  type            TransactionType
  category        FinancialCategory
  subcategory     String?
  
  amount          Decimal           @db.Decimal(12, 2)
  currency        String            @default("USD")
  quantity        Decimal?          @db.Decimal(10, 2)
  unitPrice       Decimal?          @db.Decimal(10, 2)
  
  transactionDate DateTime          @db.Date
  paymentDate     DateTime?         @db.Date
  
  operationId     String?
  marketPriceId   String?
  
  notes           String?           @db.Text
  attachments     Json?
  tags            String[]
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdById     String
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  farm            Farm              @relation(fields: [farmId], references: [id])
  field           Field?            @relation(fields: [fieldId], references: [id])
  crop            Crop?             @relation(fields: [cropId], references: [id])
  marketPrice     MarketPrice?      @relation(fields: [marketPriceId], references: [id])
  createdBy       User              @relation("TransactionCreator", fields: [createdById], references: [id])
  
  @@index([farmId, transactionDate])
  @@index([type, category])
  @@index([fieldId])
  @@map("financial_transactions")
}

model FinancialBudget {
  id            String   @id @default(cuid())
  farmId        String
  seasonId      String?
  year          Int
  month         Int?
  
  category      FinancialCategory
  plannedAmount Decimal  @db.Decimal(12, 2)
  actualAmount  Decimal  @default(0) @db.Decimal(12, 2)
  currency      String   @default("USD")
  
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  farm          Farm     @relation(fields: [farmId], references: [id])
  
  @@unique([farmId, year, month, category])
  @@index([farmId, year])
  @@map("financial_budgets")
}

model FinancialForecast {
  id               String   @id @default(cuid())
  farmId           String
  fieldId          String?
  cropId           String?
  
  forecastDate     DateTime @db.Date
  forecastType     String   // yield, price, revenue, cost
  predictedYield   Decimal? @db.Decimal(10, 2)
  predictedPrice   Decimal? @db.Decimal(10, 2)
  predictedRevenue Decimal? @db.Decimal(12, 2)
  predictedCost    Decimal? @db.Decimal(12, 2)
  confidenceScore  Decimal  @db.Decimal(5, 2)
  
  modelId          String?
  modelVersion     String?
  assumptions      Json?
  
  createdAt        DateTime @default(now())
  
  // Relations
  farm             Farm     @relation(fields: [farmId], references: [id])
  field            Field?   @relation(fields: [fieldId], references: [id])
  crop             Crop?    @relation(fields: [cropId], references: [id])
  
  @@index([farmId, forecastDate])
  @@map("financial_forecasts")
}

model MarketPrice {
  id        String   @id @default(cuid())
  commodity String
  market    String
  price     Float
  currency  String   @default("USD")
  unit      String // bushel, ton, kg, etc.
  date      DateTime
  createdAt DateTime @default(now())

  // Relations
  financialTransactions FinancialTransaction[]

  @@index([commodity, date])
  @@map("market_prices")
}