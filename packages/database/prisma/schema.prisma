// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum UserRole {
  FARM_OWNER
  FARM_MANAGER
  AGRONOMIST
  ADMIN
}

enum CropStatus {
  PLANNED
  PLANTED
  GROWING
  READY_TO_HARVEST
  HARVESTED
  FAILED
}

enum StressLevel {
  NONE
  LOW
  MODERATE
  HIGH
  SEVERE
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  passwordHash    String?
  role            UserRole @default(FARM_OWNER)
  emailVerified   DateTime? // Email verification timestamp
  userType        String?   // Optional farming type (crops, livestock, mixed, etc.)
  
  // User preferences
  currency        String?   @default("USD")
  landUnit        String?   @default("hectares")
  temperatureUnit String?   @default("celsius")
  timezone        String?   @default("UTC")
  language        String?   @default("en")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  ownedFarms    Farm[]
  managedFarms  FarmManager[]
  weatherAlerts WeatherAlert[]

  @@map("users")
}

enum FarmType {
  CROPS
  LIVESTOCK
  MIXED
}

model Farm {
  id            String   @id @default(cuid())
  name          String
  ownerId       String
  farmType      FarmType @default(CROPS)
  primaryProduct String?
  metadata      Json?    // For storing secondary products and other flexible data
  location      String?  // Added to match database
  latitude      Float
  longitude     Float
  address       String?
  region        String?
  country       String   @default("US")
  totalArea     Float // in hectares
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  owner    User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  fields   Field[]
  managers FarmManager[]

  @@map("farms")
}

model FarmManager {
  id     String @id @default(cuid())
  farmId String
  userId String

  // Relations
  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([farmId, userId])
  @@map("farm_managers")
}

model Field {
  id          String                     @id @default(cuid())
  farmId      String
  name        String
  area        Float // in hectares
  boundary    Unsupported("geography")? // PostGIS geography type
  soilType    String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  // Relations
  farm            Farm              @relation(fields: [farmId], references: [id], onDelete: Cascade)
  crops           Crop[]
  satelliteData   SatelliteData[]
  weatherData     WeatherData[]
  recommendations Recommendation[]

  @@map("fields")
}

model Crop {
  id                  String     @id @default(cuid())
  fieldId             String
  cropType            String
  variety             String?
  plantingDate        DateTime
  expectedHarvestDate DateTime
  actualHarvestDate   DateTime?
  status              CropStatus @default(PLANNED)
  yield               Float? // in kg/hectare
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("crops")
}

model WeatherData {
  id           String   @id @default(cuid())
  fieldId      String
  timestamp    DateTime
  temperature  Float // in Celsius
  humidity     Float // percentage
  precipitation Float // in mm
  windSpeed    Float // in m/s
  windDirection Int // in degrees
  pressure     Float // in hPa
  cloudCover   Float // percentage
  createdAt    DateTime @default(now())

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("weather_data")
}

model WeatherForecast {
  id                       String   @id @default(cuid())
  latitude                 Float
  longitude                Float
  date                     DateTime
  minTemp                  Float
  maxTemp                  Float
  precipitationProbability Float
  precipitationAmount      Float?
  conditions               String
  createdAt                DateTime @default(now())

  @@map("weather_forecasts")
}

model WeatherAlert {
  id          String   @id @default(cuid())
  userId      String
  alertType   String // frost, storm, drought, etc.
  severity    String // low, medium, high, severe
  message     String
  isActive    Boolean  @default(true)
  triggeredAt DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weather_alerts")
}

model SatelliteData {
  id          String      @id @default(cuid())
  fieldId     String
  captureDate DateTime
  ndvi        Float
  ndviChange  Float?
  stressLevel StressLevel @default(NONE)
  imageUrl    String?
  createdAt   DateTime    @default(now())

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("satellite_data")
}

model Recommendation {
  id          String   @id @default(cuid())
  fieldId     String
  type        String // irrigation, fertilization, planting, harvest, etc.
  title       String
  description String
  priority    String   @default("medium") // low, medium, high, urgent
  isCompleted Boolean  @default(false)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model FinancialRecord {
  id          String   @id @default(cuid())
  farmId      String?
  fieldId     String?
  category    String // input_cost, labor_cost, equipment_cost, revenue
  subcategory String? // fertilizer, pesticide, fuel, etc.
  amount      Float
  currency    String   @default("USD")
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("financial_records")
}

model MarketPrice {
  id        String   @id @default(cuid())
  commodity String
  market    String
  price     Float
  currency  String   @default("USD")
  unit      String // bushel, ton, kg, etc.
  date      DateTime
  createdAt DateTime @default(now())

  @@map("market_prices")
}

// ==================== CROP/PRODUCE DATABASE ====================

enum ProduceCategory {
  CROPS       // Grains, cereals (corn, wheat, rice)
  VEGETABLES  // Edible plants (tomato, carrot, lettuce)
  FRUITS      // Tree and vine fruits (apple, grape, strawberry)
  TREES       // Non-fruit trees (oak, pine, maple)
  HERBS       // Culinary and medicinal herbs
  NUTS        // Tree nuts and ground nuts
}

enum ClimateZone {
  TROPICAL
  SUBTROPICAL
  TEMPERATE
  CONTINENTAL
  POLAR
  ARID
  MEDITERRANEAN
}

enum SoilType {
  CLAY
  SANDY
  LOAM
  SILT
  PEAT
  CHALK
  SANDY_LOAM
  CLAY_LOAM
  SILT_LOAM
}

enum WaterRequirement {
  VERY_LOW   // Drought tolerant
  LOW        // Minimal water
  MODERATE   // Regular watering
  HIGH       // Frequent watering
  VERY_HIGH  // Constant moisture
}

enum SunRequirement {
  FULL_SHADE
  PARTIAL_SHADE
  PARTIAL_SUN
  FULL_SUN
}

enum GrowthHabit {
  ANNUAL      // Complete lifecycle in one year
  BIENNIAL    // Two-year lifecycle
  PERENNIAL   // Lives for multiple years
  DECIDUOUS   // Loses leaves seasonally
  EVERGREEN   // Retains leaves year-round
}

model ProduceType {
  id                String           @id @default(cuid())
  name              String           @unique
  scientificName    String
  category          ProduceCategory
  description       String?
  
  // Growing Requirements
  climateZones      ClimateZone[]
  hardinessZoneMin  Int?            // USDA Hardiness Zone minimum
  hardinessZoneMax  Int?            // USDA Hardiness Zone maximum
  soilTypes         SoilType[]
  soilPhMin         Float?          // Minimum soil pH
  soilPhMax         Float?          // Maximum soil pH
  waterRequirement  WaterRequirement
  sunRequirement    SunRequirement
  growthHabit       GrowthHabit
  
  // Planting Information
  plantingDepth     Float?          // in inches
  plantSpacing      Float?          // in inches
  rowSpacing        Float?          // in inches
  germinationDays   Int?            // Days to germination
  daysToMaturity    Int?            // Days from planting to harvest
  
  // Physical Characteristics
  matureHeight      Float?          // in feet
  matureSpread      Float?          // in feet
  
  // Additional Information
  companionPlants   String[]        // Good companion plants
  incompatibleWith  String[]        // Plants to avoid nearby
  commonPests       String[]        // Common pest threats
  commonDiseases    String[]        // Common disease threats
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  varieties         ProduceVariety[]
  nutritionalData   NutritionalData?
  
  @@map("produce_types")
}

model ProduceVariety {
  id                String      @id @default(cuid())
  produceTypeId     String
  name              String
  description       String?
  
  // Variety-specific characteristics
  daysToMaturity    Int?        // May differ from parent type
  yieldPerPlant     Float?      // Average yield in appropriate units
  yieldUnit         String?     // kg, lbs, bushels, etc.
  
  // Market Information
  marketDemand      String?     // High, Medium, Low
  premiumVariety    Boolean     @default(false)
  
  // Growing Characteristics
  diseaseResistance String[]    // List of diseases this variety resists
  droughtTolerant   Boolean     @default(false)
  coldTolerant      Boolean     @default(false)
  heatTolerant      Boolean     @default(false)
  
  // Appearance
  color             String?
  size              String?     // Small, Medium, Large, etc.
  shape             String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  produceType       ProduceType @relation(fields: [produceTypeId], references: [id], onDelete: Cascade)
  
  @@map("produce_varieties")
}

model NutritionalData {
  id              String      @id @default(cuid())
  produceTypeId   String      @unique
  
  // Per 100g serving
  calories        Float?
  protein         Float?      // grams
  carbohydrates   Float?      // grams
  fiber           Float?      // grams
  sugar           Float?      // grams
  fat             Float?      // grams
  saturatedFat    Float?      // grams
  
  // Vitamins (% Daily Value)
  vitaminA        Float?
  vitaminC        Float?
  vitaminD        Float?
  vitaminE        Float?
  vitaminK        Float?
  vitaminB6       Float?
  vitaminB12      Float?
  
  // Minerals (mg unless specified)
  calcium         Float?
  iron            Float?
  magnesium       Float?
  phosphorus      Float?
  potassium       Float?
  sodium          Float?
  zinc            Float?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  produceType     ProduceType @relation(fields: [produceTypeId], references: [id], onDelete: Cascade)
  
  @@map("nutritional_data")
}

model PlantingCalendar {
  id              String      @id @default(cuid())
  produceTypeId   String
  region          String      // Geographic region
  
  // Planting windows (month numbers 1-12)
  springPlantStart Int?
  springPlantEnd   Int?
  fallPlantStart   Int?
  fallPlantEnd     Int?
  
  // Harvest windows
  harvestStart     Int?
  harvestEnd       Int?
  
  // Indoor starting
  indoorStartWeeks Int?       // Weeks before last frost to start indoors
  
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("planting_calendars")
}